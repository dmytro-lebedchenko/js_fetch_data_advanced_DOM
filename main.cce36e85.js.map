{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","createDiv","divClass","divTitle","divListItem","document","body","insertAdjacentHTML","request","url","timeout","fetch","then","response","setTimeout","ok","status","statusText","json","getFirstReceivedDetails","phones","Promise","race","map","phone","id","element","name","getThreeFastestDetails","allSettled","value","join","getAllSuccessfulDetails"],"mappings":";AAAA,aA4FuB,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA1FvB,IAAMA,EAAW,4DAEjB,SAASC,EAAUC,EAAUC,EAAUC,GACrCC,SAASC,KAAKC,mBAAmB,aACjBL,qBAAAA,OAAAA,EAC6CC,qEAAAA,OAAAA,EACvDC,iBAAAA,OAAAA,EAHN,qBAQF,IAAMI,EAAU,SAACC,GAAKC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACvBC,OAAAA,MAASX,GAAAA,OAAAA,GAAWS,OAAAA,EAApB,UACJG,KAAK,SAAAC,GAOGA,OANPC,WAAW,WACL,IAACD,EAASE,GACFF,MAAAA,GAAAA,OAAAA,EAASG,OAAYH,OAAAA,OAAAA,EAASI,aAEzCP,GAEIG,EAASK,UAIhBC,EAA0B,WAC9BX,EAAQ,WACLI,KAAK,SAAAQ,GACGC,OAAAA,QAAQC,KAAKF,EAAOG,IAAI,SAAAC,GAAShB,OAAAA,EAAmBgB,WAAAA,OAAAA,EAAMC,UAElEb,KAAK,SAAAQ,GACJnB,EACE,iBACA,iBACA,CAACmB,GAAQG,IAAI,SAAAG,GAECA,MAAAA,2CAAAA,OAAAA,EAAQC,KAEVD,0CAAAA,OAAAA,EAAQD,GAJA,uCAUtBG,EAAyB,WAC7BpB,EAAQ,WACLI,KAAK,SAAAQ,GACGC,OAAAA,QAAQQ,WAAW,CACxBR,QAAQC,KAAKF,EAAOG,IAAI,SAAAC,GAAShB,OAAAA,EAAmBgB,WAAAA,OAAAA,EAAMC,QAC1DJ,QAAQC,KAAKF,EAAOG,IAAI,SAAAC,GAAShB,OAAAA,EAAmBgB,WAAAA,OAAAA,EAAMC,QAC1DJ,QAAQC,KAAKF,EAAOG,IAAI,SAAAC,GAAShB,OAAAA,EAAmBgB,WAAAA,OAAAA,EAAMC,YAG7Db,KAAK,SAAAQ,GACJnB,EACE,yBACA,gBACAmB,EAAOG,IAAI,SAAAG,GAEGA,MAAAA,yCAAAA,OAAAA,EAAQI,MAAMH,KAEhBD,0CAAAA,OAAAA,EAAQI,MAAML,GAJR,iDAOfM,KAAK,QAIVC,EAA0B,WAC9BxB,EAAQ,WACLI,KAAK,SAAAQ,GACGC,OAAAA,QAAQQ,WACbT,EAAOG,IAAI,SAAAC,GAAShB,OAAAA,EAAmBgB,WAAAA,OAAAA,EAAMC,UAEhDb,KAAK,SAAAQ,GACJnB,EACE,iBACA,iBACA,EAAImB,GAAQG,IAAI,SAAAG,GAEFA,MAAAA,yCAAAA,OAAAA,EAAQI,MAAMH,KAEhBD,0CAAAA,OAAAA,EAAQI,MAAML,GAJH,+CAOtBM,KAAK,QAIdZ,IACAS,IACAI","file":"main.cce36e85.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nfunction createDiv(divClass, divTitle, divListItem) {\n  document.body.insertAdjacentHTML('afterbegin', `\n    <div class=\"${divClass}\">\n      <h2 style=\"text-decoration: underline; color: #fc4b3b\">${divTitle}</h2>\n      ${divListItem}\n    </div>\n  `);\n}\n\nconst request = (url, timeout = 0) => {\n  return fetch(`${BASE_URL}${url}.json`)\n    .then(response => {\n      setTimeout(() => {\n        if (!response.ok) {\n          return `${response.status} - ${response.statusText}`;\n        }\n      }, timeout);\n\n      return response.json();\n    });\n};\n\nconst getFirstReceivedDetails = () => {\n  request('/phones')\n    .then(phones => {\n      return Promise.race(phones.map(phone => request(`/phones/${phone.id}`)));\n    })\n    .then(phones => {\n      createDiv(\n        'first-received',\n        'First Received',\n        [phones].map(element => `\n          <span>\n            [Name]: ${element.name}\n            <br>\n            [ID]: ${element.id}\n          </span>\n        `));\n    });\n};\n\nconst getThreeFastestDetails = () => {\n  request('/phones')\n    .then(phones => {\n      return Promise.allSettled([\n        Promise.race(phones.map(phone => request(`/phones/${phone.id}`))),\n        Promise.race(phones.map(phone => request(`/phones/${phone.id}`))),\n        Promise.race(phones.map(phone => request(`/phones/${phone.id}`))),\n      ]);\n    })\n    .then(phones => {\n      createDiv(\n        'three-fastest-received',\n        'Three Fastest',\n        phones.map(element => `\n          <li>\n            [Name]: ${element.value.name}\n            <br>\n            [ID]: ${element.value.id}\n          </li>\n          <br>\n        `).join(''));\n    });\n};\n\nconst getAllSuccessfulDetails = () => {\n  request('/phones')\n    .then(phones => {\n      return Promise.allSettled(\n        phones.map(phone => request(`/phones/${phone.id}`)));\n    })\n    .then(phones => {\n      createDiv(\n        'all-successful',\n        'All Successful',\n        [...phones].map(element => `\n          <li>\n            [Name]: ${element.value.name}\n            <br>\n            [ID]: ${element.value.id}\n          </li>\n          <br>\n      `).join(''));\n    });\n};\n\ngetFirstReceivedDetails();\ngetThreeFastestDetails();\ngetAllSuccessfulDetails();\n"]}